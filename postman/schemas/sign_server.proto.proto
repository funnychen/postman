syntax = "proto3";
//package code generated by ccc  DO NOT EDIT.
package   devx_sample.funnychen_server_a;
// 建议使用谷歌protobuf规范 遵循PB语法检查
// 谷歌protobuf规范地址：https://developers.google.com/protocol-buffers/docs/style
// Proto格式检查（Tencent）包含：Google protobuf规范和数据校验检查

//code generated by ccc  DO NOT EDIT.
option  go_package ="git.woa.com/ccc-protocol/library/frameType/devx_sample/funnychen_server_a";

// 不建议使用 google/protobuf/any.proto
// any强依赖package type.googleapis.com/_packagename_._messagename_.
// https://developers.google.com/protocol-buffers/docs/proto3#any
// 同模块下，可通过如下格式导入当前PB文件:  import  "funnychen_server_a/sign_server.proto"

import "google/api/annotations.proto";
import "validate/validate.proto";

// 设置签名请求参数
message SetSignRequest {
    // 用户名
    string user = 1 [(validate.rules).string.min_len = 2];
    // 签名内容
    string sign = 2 [(validate.rules).string.max_len = 64];
}

// 获取签名请求参数
message GetSignRequest {
    // 用户名
    string user = 1 [(validate.rules).string.min_len = 2];
}

// 返回结果
message SignReply {
    // 返回消息
    string msg = 1;
    // 错误码
    string code = 2;
    // 返回的数据
    SignInfo data = 3;
}

// 签名信息
message SignInfo {
    // 签名内容
    string sign = 1;
    // 签名更新时间
    string update_time = 2;
}

// 签名服务
service SignServer {
    // 设置签名
    rpc SetSign (SetSignRequest) returns (SignReply){
        option (google.api.http) = {
            post: "/api/v1/sign"
        };
    };

    // 获取签名
    rpc GetSign (GetSignRequest) returns (SignReply){
        option (google.api.http) = {
            get: "/api/v1/sign"
        };
    };
}

